                 ; constants
                 CONSTANT read_strobe, 08
                 CONSTANT write_strobe, 04
                 CONSTANT red, E0
                 CONSTANT yellow, D8
                 CONSTANT green, 1C
                 CONSTANT blue, 03
                 CONSTANT white, FF
                 CONSTANT black, 00
                 ; registers
                 NAMEREG s0, data_lo
                 NAMEREG s1, data_hi
                 NAMEREG s2, v_counter
                 NAMEREG s3, h_counter
                 NAMEREG s4, color2
                 NAMEREG s5, write
                 NAMEREG s6, data_in
                 NAMEREG s7, zero
                 NAMEREG s8, read
                 NAMEREG s9, color1
                 ;
                 NAMEREG sA, rd_addr_lo
                 NAMEREG sB, rd_addr_mi
                 NAMEREG sC, rd_addr_hi
                 NAMEREG sD, wr_addr_lo
                 NAMEREG sE, wr_addr_mi
                 NAMEREG sF, wr_addr_hi
                 ADDRESS 000
                 ;jump halt
                 LOAD rd_addr_hi, 00
                 LOAD rd_addr_mi, 9C
                 LOAD rd_addr_lo, EF
                 LOAD wr_addr_hi, 00
                 LOAD wr_addr_mi, 9C
                 LOAD wr_addr_lo, EF
                 LOAD v_counter, 00
                 LOAD h_counter, 00
                 LOAD read, read_strobe
                 LOAD write, write_strobe
                 LOAD zero, 00
                 LOAD color1, white
                 LOAD color2, black
                 LOAD data_lo, color1
                 LOAD data_hi, color1
                 ENABLE INTERRUPT
           main: 
                 CALL read_word
                 COMPARE data_lo, color2
                 CALL Z, change_color
                 CALL inc_counters
                 COMPARE h_counter, 00
                 CALL Z, next_row
                 COMPARE h_counter, 00
                 CALL NZ, next_colomn
                 COMPARE v_counter, D3
                 CALL Z, swap_colors
                 OUTPUT color1, 08
                 OUTPUT color2, 07
                 JUMP main
                 ;
                 ;
      read_word: 
                 OUTPUT rd_addr_lo, 02
                 OUTPUT rd_addr_mi, 03
                 OUTPUT rd_addr_hi, 04
                 OUTPUT read, 05
wait_op_done_rd: 
                 INPUT data_in, 06
                 COMPARE data_in, 01
                 JUMP NZ, wait_op_done_rd
                 OUTPUT zero, 06
                 INPUT data_lo, 00
                 INPUT data_hi, 01
                 RETURN
                 ;
     write_word: 
                 OUTPUT data_lo, 00
                 OUTPUT data_hi, 01
                 OUTPUT wr_addr_lo, 02
                 OUTPUT wr_addr_mi, 03
                 OUTPUT wr_addr_hi, 04
                 OUTPUT write, 05
wait_op_done_wr: 
                 INPUT data_in, 06
                 COMPARE data_in, 01
                 JUMP NZ, wait_op_done_wr
                 OUTPUT zero, 06
                 RETURN
                 ;
   inc_counters: 
                 ADD h_counter, 01
                 COMPARE h_counter, 44
                 CALL Z, inc_v_counter
                 RETURN
                 ;
  inc_v_counter: 
                 LOAD h_counter, 00
                 ADD v_counter, 01
                 RETURN
                 ;
                 ; adjust counters for next colomn
    next_colomn: 
                 ADD rd_addr_lo, 01
                 ADDCY rd_addr_mi, 00
                 ADDCY rd_addr_hi, 00
                 ADD wr_addr_lo, 01
                 ADDCY wr_addr_mi, 00
                 ADDCY wr_addr_hi, 00
                 RETURN
                 ;
                 ; adjust counters for next row
       next_row: 
                 ADD rd_addr_lo, 4D
                 ADDCY rd_addr_mi, 01
                 ADDCY rd_addr_hi, 00
                 ADD wr_addr_lo, 4D
                 ADDCY wr_addr_mi, 01
                 ADDCY wr_addr_hi, 00
                 RETURN
                 ;
   change_color: 
                 LOAD data_lo, color1
                 LOAD data_hi, color1
                 CALL write_word
                 RETURN
                 ;
          delay: 
                 DISABLE INTERRUPT
                 LOAD read, 00
                 LOAD write, 00
          loop1: 
                 ADD zero, 01
                 ADDCY read, 00
                 ADDCY write, 00
                 JUMP NC, loop1
                 LOAD read, read_strobe
                 LOAD write, write_strobe
                 LOAD zero, 00
                 ENABLE INTERRUPT
                 RETURN
                 ;
    swap_colors: 
                 CALL delay
                 XOR color1, color2
                 XOR color2, color1
                 XOR color1, color2
                 LOAD data_lo, color1
                 LOAD data_hi, color1
                 LOAD rd_addr_hi, 00
                 LOAD rd_addr_mi, 9C
                 LOAD rd_addr_lo, EF
                 LOAD wr_addr_hi, 00
                 LOAD wr_addr_mi, 9C
                 LOAD wr_addr_lo, EF
                 LOAD h_counter, 00
                 LOAD v_counter, 00
                 RETURN
                 ;
           halt: 
                 JUMP halt
                 ;
            isr: 
                 INPUT zero, 07
                 OUTPUT zero, 07
                 ; OUTPUT zero,08
                 LOAD zero, 00
                 RETURNI ENABLE
                 ADDRESS 3FF
                 JUMP isr
