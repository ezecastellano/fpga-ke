KCPSM3 Assembler log file for program 'bmp24prog.psm'.
Generated by KCPSM3 version v2.01
Ken Chapman - Xilinx Ltd - 17th November 2011

Assembly datestamp: 18 Sep 2012
Assembly timestamp: 10:28:29

Last occupied address: 064 hex


 Addr Code                     Instruction

 000                           ; constants
 000                           CONSTANT read_strobe, 08
 000                           CONSTANT write_strobe, 04
 000                           CONSTANT red, E0
 000                           CONSTANT yellow, D8
 000                           CONSTANT green, 1C
 000                           CONSTANT blue, 03
 000                           CONSTANT white, FF
 000                           CONSTANT black, 00
 000                           CONSTANT rojoazul, C3
 000                           CONSTANT magenta, E3
 000                           ; registers
 000                           NAMEREG s0, data_lo
 000                           NAMEREG s1, data_hi
 000                           NAMEREG s2, counter_lo
 000                           NAMEREG s3, counter_hi
 000                           ;;;;;;;;;;;;;NAMEREG s4,color2
 000                           NAMEREG s5, write
 000                           NAMEREG s6, data_in
 000                           NAMEREG s7, zero
 000                           NAMEREG s8, read
 000                           ;;;;;;;;;;;;;NAMEREG s9,color1
 000                           NAMEREG sA, rd_addr_lo
 000                           NAMEREG sB, rd_addr_mi
 000                           NAMEREG sC, rd_addr_hi
 000                           NAMEREG sD, wr_addr_lo
 000                           NAMEREG sE, wr_addr_mi
 000                           NAMEREG sF, wr_addr_hi
 000                           ADDRESS 000
 000                           ;jump halt
 000  00C00                    LOAD sC[rd_addr_hi], 00
 001  00B00                    LOAD sB[rd_addr_mi], 00
 002  00A00                    LOAD sA[rd_addr_lo], 00
 003  00F00                    LOAD sF[wr_addr_hi], 00
 004  00E00                    LOAD sE[wr_addr_mi], 00
 005  00D00                    LOAD sD[wr_addr_lo], 00
 006  00200                    LOAD s2[counter_lo], 00
 007  00300                    LOAD s3[counter_hi], 00
 008  00808                    LOAD s8[read], 08[read_strobe]
 009  00504                    LOAD s5[write], 04[write_strobe]
 00A  00700                    LOAD s7[zero], 00
 00B  00000                    LOAD s0[data_lo], 00
 00C  00100                    LOAD s1[data_hi], 00
 00D                           ;ENABLE INTERRUPT
 00D                     main: 
 00D                           ; Setear la ultima direccion desde la que vamos a empezar
 00D  30046                    CALL 046[ultima_direccion]
 00E                    main2: 
 00E  30019                    CALL 019[read_word]
 00F  30038                    CALL 038[change_color]
 010  3002F                    CALL 02F[dec_counters]
 011  14A1A                    COMPARE sA[rd_addr_lo], 1A           ; Como decremento antes no tengo que usar 1B sino 1A
 012  3540E                    JUMP NZ, 00E[main2]
 013  14B00             comp2: COMPARE sB[rd_addr_mi], 00
 014  3540E                    JUMP NZ, 00E[main2]
 015  14C00             comp3: COMPARE sC[rd_addr_hi], 00
 016  3540E                    JUMP NZ, 00E[main2]
 017  34018                    JUMP 018[nada]                       ; Ya termine de recorrer la imagen => no la vuelvo a recorrer
 018                     nada: 
 018  34018                    JUMP 018[nada]
 019                read_word: 
 019  2CA02                    OUTPUT sA[rd_addr_lo], 02
 01A  2CB03                    OUTPUT sB[rd_addr_mi], 03
 01B  2CC04                    OUTPUT sC[rd_addr_hi], 04
 01C  2C805                    OUTPUT s8[read], 05
 01D          wait_op_done_rd: 
 01D  04606                    INPUT s6[data_in], 06
 01E  14601                    COMPARE s6[data_in], 01
 01F  3541D                    JUMP NZ, 01D[wait_op_done_rd]
 020  2C706                    OUTPUT s7[zero], 06
 021  04000                    INPUT s0[data_lo], 00
 022  04101                    INPUT s1[data_hi], 01
 023  2A000                    RETURN 
 024                           ;
 024               write_word: 
 024  2C000                    OUTPUT s0[data_lo], 00
 025  2C101                    OUTPUT s1[data_hi], 01
 026  2CD02                    OUTPUT sD[wr_addr_lo], 02
 027  2CE03                    OUTPUT sE[wr_addr_mi], 03
 028  2CF04                    OUTPUT sF[wr_addr_hi], 04
 029  2C505                    OUTPUT s5[write], 05
 02A          wait_op_done_wr: 
 02A  04606                    INPUT s6[data_in], 06
 02B  14601                    COMPARE s6[data_in], 01
 02C  3542A                    JUMP NZ, 02A[wait_op_done_wr]
 02D  2C706                    OUTPUT s7[zero], 06
 02E  2A000                    RETURN 
 02F                           ;
 02F                           ;
 02F             dec_counters: 
 02F  18201                    ADD s2[counter_lo], 01
 030  1A300                    ADDCY s3[counter_hi], 00
 031  1CA01                    SUB sA[rd_addr_lo], 01
 032  1EB00                    SUBCY sB[rd_addr_mi], 00
 033  1EC00                    SUBCY sC[rd_addr_hi], 00
 034  1CD01                    SUB sD[wr_addr_lo], 01
 035  1EE00                    SUBCY sE[wr_addr_mi], 00
 036  1EF00                    SUBCY sF[wr_addr_hi], 00
 037  2A000                    RETURN 
 038                           ;
 038             change_color: 
 038  0E0FF                    XOR s0[data_lo], FF
 039  0E1FF                    XOR s1[data_hi], FF
 03A  30024                    CALL 024[write_word]
 03B  2A000                    RETURN 
 03C                           ;
 03C                    delay: 
 03C                           ;DISABLE INTERRUPT
 03C  00800                    LOAD s8[read], 00
 03D  00500                    LOAD s5[write], 00
 03E                    loop1: 
 03E  18701                    ADD s7[zero], 01
 03F  1A800                    ADDCY s8[read], 00
 040  1A500                    ADDCY s5[write], 00
 041  35C3E                    JUMP NC, 03E[loop1]
 042  00808                    LOAD s8[read], 08[read_strobe]
 043  00504                    LOAD s5[write], 04[write_strobe]
 044  00700                    LOAD s7[zero], 00
 045  2A000                    RETURN 
 046         ultima_direccion: 
 046                           ; Registros disponibles s4 y s9 wr_addr_lo wr_addr_mi wr_addr_hi
 046                           ; Cargar el ancho en s4 y s9
 046  00C00                    LOAD sC[rd_addr_hi], 00
 047  00B00                    LOAD sB[rd_addr_mi], 00
 048  00A09                    LOAD sA[rd_addr_lo], 09
 049  30019                    CALL 019[read_word]
 04A  01400                    LOAD s4, s0[data_lo]
 04B  01910                    LOAD s9, s1[data_hi]
 04C                           ; Cargar el alto en sE y sD
 04C  00A0B                    LOAD sA[rd_addr_lo], 0B
 04D  30019                    CALL 019[read_word]
 04E  01D00                    LOAD sD[wr_addr_lo], s0[data_lo]
 04F  01E10                    LOAD sE[wr_addr_mi], s1[data_hi]
 050                           ; Inicializar la ultima direccion en 0
 050  00A00                    LOAD sA[rd_addr_lo], 00
 051                    ciclo: 
 051  14900                    COMPARE s9, 00                       ; La parte alta del ancho es 0?
 052  35455                    JUMP NZ, 055[suma_general]           ; Es distinta => tengo que seguir iterando
 053  14400                    COMPARE s4, 00                       ; La parte baja del ancho es 0?
 054  3505F                    JUMP Z, 05F[fin]                     ; La parte baja es 0, termine de iterar
 055                           ; La parte baja es distinta de 0 => tengo que seguir iterando
 055             suma_general: 
 055  3005B                    CALL 05B[suma_aux]
 056  3005B                    CALL 05B[suma_aux]
 057  3005B                    CALL 05B[suma_aux]
 058                           ; Decremento 1 del ancho por cada llamada a suma_general
 058  1C401                    SUB s4, 01
 059  1E900                    SUBCY s9, 00
 05A  34051                    JUMP 051[ciclo]
 05B                 suma_aux: 
 05B                           ; Le agrego a la ultima direccion tantos pixels como alto
 05B  19AD0                    ADD sA[rd_addr_lo], sD[wr_addr_lo]
 05C  1BBE0                    ADDCY sB[rd_addr_mi], sE[wr_addr_mi]
 05D  1AC00                    ADDCY sC[rd_addr_hi], 00
 05E  2A000                    RETURN 
 05F                      fin: 
 05F                           ; Falta dividir por 2!!!!!!
 05F  20B0E                    SR0 sB[rd_addr_mi]
 060  20A08                    SRA sA[rd_addr_lo]
 061                           ; La direccion de escritura empieza como la de lectura
 061  01DA0                    LOAD sD[wr_addr_lo], sA[rd_addr_lo]
 062  01EB0                    LOAD sE[wr_addr_mi], sB[rd_addr_mi]
 063  01FC0                    LOAD sF[wr_addr_hi], sC[rd_addr_hi]
 064  2A000                    RETURN 



List of defined constants

timestamp_hours = 10'd
timestamp_minutes = 28'd
timestamp_seconds = 29'd
datestamp_year = 12'd
datestamp_month = 9'd
datestamp_day = 18'd
read_strobe = 08
write_strobe = 04
red = E0
yellow = D8
green = 1C
blue = 03
white = FF
black = 00
rojoazul = C3
magenta = E3



List of text strings

KCPSM3_version$ = "v2.01"
datestamp$ = "18 Sep 2012"
timestamp$ = "10:28:29"



End of KCPSM3 log file.
